@page "/pages/applications/categories/{Id}"
@using Examination.Dtos.Categories
@using Microsoft.Extensions.Logging
@inject ICategoryService CategoryService
@inject ILogger<ItemDetails> Logger
@inject ISnackbar Snackbar


<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Category</MudText>
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <MudCard Elevation="25" Style="height:100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Please fill fully information</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="px-0">

                    <MudTextField Label="Name" HelperText="Example: C# Programming"
                                  @bind-Value="model.Name" For="@(() => model.Name)" />

                    <MudTextField T="string" Label="URL Path" HelperText="Example: csharp-programming" Required="true" RequiredError="URL is required!" />

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>

            </MudCard>
        </EditForm>
        <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
            Fill out the form correctly to see the success message.
        </MudText>

        <MudExpansionPanels>
            <MudExpansionPanel Text="Show Validation Summary">
                @if (!success)
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>

    </MudItem>
</MudGrid>

@code {
    bool success;
    [Parameter]
    public string Id { set; get; }

    CategoryRequest model = new CategoryRequest();
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await LoadItemDetails(Id);
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            if (string.IsNullOrEmpty(Id))
            {
                success = await CategoryService.Create(model);
            }
            else
            {
                success = await CategoryService.Update(Id, model);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Create action is not success", Severity.Error);
            Logger.LogError(ex.Message);

        }
        StateHasChanged();
    }
    private async Task LoadItemDetails(string id)
    {
        var item = await CategoryService.GetDetail(Id);
        model.Name = item.Name;
        model.UrlPath = item.UrlPath;
    }

}
