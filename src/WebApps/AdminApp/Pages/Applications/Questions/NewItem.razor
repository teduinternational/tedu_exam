@page "/app/questions/new"
@using Examination.Shared.Questions
@using Examination.Shared.Categories
@using Examination.Shared.Enums
@using Microsoft.Extensions.Logging
@inject IQuestionService QuestionService
@inject ICategoryService CategoryService
@inject ILogger<NewItem> Logger
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Question</MudText>
<MudGrid>
    <EditForm Model="model" OnValidSubmit="OnValidSubmit">
        <MudItem xs="12" sm="12" md="6">
            <MudCard Elevation="25" Style="height:100%;">
                <MudCardContent Class="px-5">
                    <DataAnnotationsValidator />
                    <MudTextField Label="Content" Required="true" RequiredError="Content is required"
                                  @bind-Value="model.Content" For="@(() => model.Content)" />

                    <MudRadioGroup @bind-SelectedOption="model.Level" Required="true" RequiredError="Level is required">
                        <MudRadio Option="@(nameof(Level.Easy))" Color="Color.Primary">Easy</MudRadio>
                        <MudRadio Option="@(nameof(Level.Medium))" Color="Color.Warning">Medium</MudRadio>
                        <MudRadio Option="@(nameof(Level.Difficult))" Color="Color.Error">Difficult</MudRadio>

                    </MudRadioGroup>

                    <MudRadioGroup @bind-SelectedOption="model.QuestionType" Required="true" RequiredError="Question type is required">
                        <MudRadio Option="@(nameof(QuestionType.SingleSelection))" Color="Color.Primary">Single Choice</MudRadio>
                        <MudRadio Option="@(nameof(QuestionType.MultipleSelection))" Color="Color.Secondary">Multiple Choice</MudRadio>
                    </MudRadioGroup>

                    <MudSelect Label="Category" @bind-Value="model.CategoryId" Required="true" RequiredError="Category is required"
                               OffsetY="true" AdornmentIcon="@Icons.Material.Filled.Category" AdornmentColor="Color.Primary">
                        @foreach (var item in categories)
                        {
                            <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudTextField Label="Explain answer" Required="true" RequiredError="Explain is required"
                                  @bind-Value="model.Explain" For="@(() => model.Explain)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>

            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="12" md="6">

            <MudCard Elevation="25" Style="height:100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudButton OnClick="AddAnswer">Create</MudButton>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="px-5">
                    <MudTable Items="@answers" Hover="true" Breakpoint="Breakpoint.Sm"
                              Loading="@loading" Context="item" LoadingProgressColor="Color.Info">
                        <HeaderContent>
                            <MudTh>Content</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Content">@item.Content</MudTd>
                            <MudTd DataLabel="Correct">@(item.IsCorrect?"Correct":"")</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </EditForm>
</MudGrid>
<MudOverlay Visible="loading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
@code {
    bool success;
    bool loading = false;
    [Parameter]
    public string Id { set; get; }
    CreateQuestionRequest model = new CreateQuestionRequest();
    List<CategoryDto> categories = new List<CategoryDto>();
    List<AnswerDto> answers = new List<AnswerDto>();

    protected async override Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllCategoriesAsync();
    }
    private async Task AddAnswer()
    {
        var parameters = new DialogParameters { ["Model"] = new AnswerDto() };

        var dialog = DialogService.Show<AddAnswerDialog>("Add Answer", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            answers.Add(result.Data as AnswerDto);
        }
    }
    private async Task OnValidSubmit(EditContext context)
    {
        loading = true;
        success = await QuestionService.CreateAsync(model);
        if (success)
        {
            Snackbar.Add("Create new item success", Severity.Success);
            NavigationManager.NavigateTo(UrlConstants.Categories);
        }
        else
        {
            Snackbar.Add("Create action is not success", Severity.Error);
        }
        loading = false;
        StateHasChanged();
    }
}